from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from typing import List, Dict, Any
from utils.preprocessing import preprocess_code

class PlagiarismCheckerService:
    def check_plagiarism(self, current_project: Dict[str, Any], existing_projects: List[Dict[str, Any]]) -> Dict[str, Any]:
        vectorizer = TfidfVectorizer()
        overall_similarity = 0
        file_similarities = {}
        most_similar_projects = {}
        
        for filename, content in current_project['files_content'].items():
            preprocessed_current = preprocess_code(content)
            existing_contents = [preprocess_code(project['files_content'].get(filename, '')) 
                                 for project in existing_projects]
            
            if not existing_contents:
                file_similarities[filename] = 0
                continue
            
            all_contents = [preprocessed_current] + existing_contents
            tfidf_matrix = vectorizer.fit_transform(all_contents)
            
            cosine_similarities = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:]).flatten()
            max_similarity = np.max(cosine_similarities)
            most_similar_index = np.argmax(cosine_similarities)
            
            file_similarities[filename] = max_similarity * 100
            if max_similarity > 0:
                most_similar_projects[filename] = existing_projects[most_similar_index]['roll_no']
            
            overall_similarity += max_similarity
        
        overall_similarity /= len(current_project['files_content']) if current_project['files_content'] else 1
        
        return {
            "overall_similarity": overall_similarity,
            "file_similarities": file_similarities,
            "most_similar_projects": most_similar_projects
        }

# backend/services/db_service.py
from pymongo import MongoClient
from typing import List, Dict, Any
from models.project import Project
from config import MONGODB_URI, DB_NAME, COLLECTION_NAME

class DBService:
    def __init__(self):
        self.client = MongoClient(MONGODB_URI)
        self.db = self.client[DB_NAME]
        self.projects = self.db[COLLECTION_NAME]

    def save_project(self, project: Project):
        project_data = project.__dict__
        self.projects.update_one({"roll_no": project.roll_no}, {"$set": project_data}, upsert=True)

    def get_all_projects(self) -> List[Dict[str, Any]]:
        return list(self.projects.find({}, {"_id": 0}))

# backend/utils/preprocessing.py
import re

def preprocess_code(code: str) -> str:
    # Remove comments
    code = re.sub(r'(?m)^ *#.*\n?', '', code)
    code = re.sub(r'(?m)^ *//.*\n?', '', code)
    # Remove string literals
    code = re.sub(r'".*?"', '', code)
    code = re.sub(r"'.*?'", '', code)
    # Tokenize
    tokens = re.findall(r'\b\w+\b', code)
    return ' '.join(tokens)

# backend/utils/scoring.py
from typing import Dict, Any

def calculate_score(analysis_result: Dict[str, Any], plagiarism_report: Dict[str, Any]) -> float:
    complexity_score = min(analysis_result['complexity'] / 10, 1) * 40
    originality_score = (1 - plagiarism_report['overall_similarity']) * 60
    return complexity_score + originality_score

# requirements.txt
flask==2.0.1
flasgger==0.9.5
streamlit==0.84.0
pandas==1.3.0
requests==2.26.0
ratelimit==2.2.1
pymongo==3.12.0
radon==5.1.0
scikit-learn==0.24.2
numpy==1.21.0

# README.md
# Project Verification System
